".source.js, .source.jsx, .source.ts, .source.js-semantic":
  'React Component Full':
    'prefix': 'rcf'
    'body': """
    import React from 'react'

    export default class extends React.Component {
        constructor (props) {
            super(props)
            // this.setState({property: props.property);
        }

        componentWillMount () {
            // Invoked immediately before mounting occurs.
        }

        render () {
            return (
              <div>Component content</div>
            )
        }

        componentDidMount () {
            // Invoked immediately after a component is mounted.
            // This is a good place to retrieve data from a remote endpoint.
            // Setting state in this method will trigger a re-rendering.
        }

        componentWillReceiveProps (nextProps) {
            // Invoked before a mounted component receives new props.
            // Doesn't get called during mounting.
        }

        shouldComponentUpdate (nextProps, nextState) {
            // Lets React know if a component's output is not affected by the current change in state or props.
            // If false is returned here then componentWillUpdate(), render(), and componentDidUpdate() will not be invoked.
        }

        componentWillUpdate (nextProps, nextState) {
            // Invoked immediately before rendering when new props or state are being received.
        }

        componentDidUpdate (prevProps, prevState) {
            // Invoked immediately after updating occurs.Not called for the initial render.
        }

        componentWillUnmount () {
            // Invoked immediately before a component is unmounted and destroyed.
            // Perform any necessary cleanup in this method: invalidating timers, cancelling network requests,
            // cleaning up any DOM elements etc.
        }
    }
    """
